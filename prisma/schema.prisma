// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? 
  access_token      String? 
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model User {
  id           String        @id @default(uuid())
  name         String?
  email        String        @unique
  emailVerified DateTime?
  image         String?
  createdAt    DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  accounts      Account[]
  sessions      Session[]

  collection   Collection[]
  wishlistLists WishlistList[]
  decklists    Decklist[]
  logs         CollectionChangeLog[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Collection {
  id        String     @id @default(uuid())
  name      String     @default("Main")
  isDefault Boolean    @default(true)   // pour marquer la collection principale
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  items     CollectionItem[]

  @@unique([userId, name])
  @@index([userId])
}

model CollectionItem {
  id           String     @id @default(uuid())
  scryfallId   String
  quantity     Int        @default(1)
  dateAdded    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  priceHistory Json

  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId String

  @@unique([collectionId, scryfallId])
  @@index([collectionId])
  @@index([scryfallId])
}

model WishlistList {
  id        String         @id @default(uuid())
  name      String
  isDefault Boolean        @default(false)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  items     WishlistItem[]

  @@unique([userId, name])
  @@index([userId])
}

model WishlistItem {
  id           String       @id @default(uuid())
  scryfallId   String
  quantity     Int          @default(1)
  dateAdded    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  wishlist     WishlistList @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  wishlistId   String

  @@unique([wishlistId, scryfallId])
  @@index([scryfallId])
}

model Decklist {
  id        String     @id @default(uuid())
  name      String
  colors Json?   // ex: ["W","U"] — tableau JSON de strings
  showcasedDeckCardId String?
  showcasedArt        String? 
  format   String     @default("standard") // ex: "commander", "standard", etc.
  isLocked Boolean    @default(false) // pour empêcher les modifs accidentelles
  notes    String?    // notes utilisateur sur le deck
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  user      User       @relation(fields: [userId], references: [id])
  userId    String

  cards     DeckCard[] // relation vers cartes du deck

  // Relation optionnelle vers la carte showcase
  showcasedDeckCard DeckCard? @relation("DecklistShowcase", fields: [showcasedDeckCardId], references: [id], onDelete: SetNull, onUpdate: Cascade)
}

model DeckCard {
  id           String     @id @default(uuid())
  scryfallId   String
  quantity     Int        @default(1)
  allocated    Int        @default(0) // ✅ combien d'exemplaires « pris » depuis la collection

  deck         Decklist   @relation(fields: [deckId], references: [id])
  deckId       String

  // côté inverse de la relation showcase (pas de champ)
  DecklistShowcase Decklist[] @relation("DecklistShowcase")
}

model CollectionChangeLog {
  id          String   @id @default(uuid())
  userId      String
  scryfallId  String
  changeType  String   // "add", "remove", "update"
  quantity    Int      // ex: +2 ou -1
  totalAfter  Int
  changedAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([scryfallId])
}