"use client";

import { useEffect, useState } from "react";
import { useSession } from "next-auth/react";
import WishlistList from "../../components/WishlistList";
import { formatCard } from "../../services/FormatCard";
import Card from "../../components/Card"
import styles from "./page.module.css";

export default function WishlistPage() {
  const { data: session, status } = useSession();
  const [lists, setLists] = useState([]);
  const [loading, setLoading] = useState(true);
  const [newListName, setNewListName] = useState("");
  const [editListId, setEditListId] = useState(null);
  const [editedName, setEditedName] = useState("");
  const [cardsByList, setCardsByList] = useState({}); // { [listId]: [cards] }

  // Pour l'ajout de carte
  const [cardInputs, setCardInputs] = useState({}); // { [listId]: "scryfallId" }

  const userId = session?.user?.id;

  useEffect(() => {
    const fetchWishlistLists = async () => {
      if (!userId) return;
      try {
        const res = await fetch(`/api/users/${userId}/wishlist/lists`);
        const data = await res.json();
        setLists(data);
        console.log("✅ Listes récupérées :", data);
      } catch (error) {
        console.error("❌ Erreur chargement listes de souhait :", error);
      } finally {
        setLoading(false);
      }
    };

    if (status === "authenticated") {
      fetchWishlistLists();
    }
  }, [userId, status]);

  useEffect(() => {
    const fetchWishlistCards = async () => {
      if (!userId || lists.length === 0) return;
  
      const allCardsByList = {};
  
      for (const list of lists) {
        try {
          const res = await fetch(`/api/users/${userId}/wishlist/lists/${list.id}/items`);
          const items = await res.json();
  
          // 🔁 Fetch chaque carte Scryfall
          const enrichedCards = await Promise.all(
            items.map(async (item) => {
              const scryfallRes = await fetch(`https://api.scryfall.com/cards/${item.scryfallId}`);
              const rawCard = await scryfallRes.json();
              const formatted = formatCard(rawCard);
              return {
                ...formatted,
                quantity: item.quantity,
                wishlistItemId: item.id, // pour gérer suppression ou édition
              };
            })
          );
  
          allCardsByList[list.id] = enrichedCards;
        } catch (error) {
          console.error(`❌ Erreur chargement cartes pour la liste ${list.name} :`, error);
        }
      }
  
      setCardsByList(allCardsByList);
    };
  
    fetchWishlistCards();
  }, [userId, lists]);

  const handleCreateList = async () => {
    if (!newListName.trim()) return;

    try {
      const res = await fetch(`/api/users/${userId}/wishlist/lists`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ name: newListName }),
      });

      const newList = await res.json();
      setLists((prev) => [newList, ...prev]);
      setNewListName("");
    } catch (error) {
      console.error("❌ Erreur création liste :", error);
    }
  };

  const handleDeleteList = async (listId) => {
    if (!confirm("Supprimer cette liste ?")) return;

    try {
      await fetch(`/api/users/${userId}/wishlist/lists`, {
        method: "DELETE",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ listId }),
      });

      setLists((prev) => prev.filter((list) => list.id !== listId));
    } catch (error) {
      console.error("❌ Erreur suppression liste :", error);
    }
  };

  const handleUpdateListName = async (listId) => {
    if (!editedName.trim()) return;

    try {
      const res = await fetch(`/api/users/${userId}/wishlist/lists`, {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ listId, name: editedName }),
      });

      const updated = await res.json();

      setLists((prev) =>
        prev.map((list) => (list.id === updated.id ? { ...list, name: updated.name } : list))
      );

      setEditListId(null);
      setEditedName("");
    } catch (error) {
      console.error("❌ Erreur mise à jour du nom :", error);
    }
  };

  const handleClearList = async (listId) => {
    if (!confirm("Supprimer toutes les cartes de cette liste ?")) return;

    try {
      const res = await fetch(`/api/users/${userId}/wishlist/items`, {
        method: "DELETE",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ wishlistId: listId }),
      });

      if (!res.ok) throw new Error("Erreur lors du vidage");

      // Re-fetch les listes à jour
      const updatedRes = await fetch(`/api/users/${userId}/wishlist/lists`);
      const data = await updatedRes.json();
      setLists(data);
    } catch (error) {
      console.error("❌ Erreur vidage de la liste :", error);
    }
  };

  const handleCardInputChange = (listId, value) => {
    setCardInputs((prev) => ({ ...prev, [listId]: value }));
  };

  const handleAddCardToList = async (listId) => {
    const scryfallId = cardInputs[listId]?.trim();
    if (!scryfallId) return;

    try {
      const res = await fetch(`/api/users/${userId}/wishlist/items`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          scryfallId,
          quantity: 1,
          wishlistId: listId,
        }),
      });

      if (!res.ok) throw new Error("Erreur lors de l'ajout");

      setCardInputs((prev) => ({ ...prev, [listId]: "" }));
      console.log("✅ Carte ajoutée à la liste");
    } catch (error) {
      console.error("❌ Erreur ajout carte :", error);
    }
  };

  if (status === "loading") return <p>Chargement de la session...</p>;
  if (status === "unauthenticated") return <p>Veuillez vous connecter.</p>;

  return (
    <div className={styles.wishlistPage}>
      <h1>Mes listes de souhaits</h1>

      <div className={styles.newListForm}>
        <input
          type="text"
          placeholder="Nom de la nouvelle liste"
          value={newListName}
          onChange={(e) => setNewListName(e.target.value)}
        />
        <button onClick={handleCreateList}>➕ Créer la liste</button>
      </div>

      {loading && <p>Chargement des listes...</p>}

      {!loading && lists.length === 0 && (
        <p>Vous n'avez aucune liste de souhait pour le moment.</p>
      )}

      {lists.map((list) => (
        <div key={list.id} className={styles.wishlistEntry}>
          {editListId === list.id ? (
            <>
              <input
                type="text"
                value={editedName}
                onChange={(e) => setEditedName(e.target.value)}
              />
              <button onClick={() => handleUpdateListName(list.id)}>💾 Enregistrer</button>
              <button onClick={() => setEditListId(null)}>❌ Annuler</button>
            </>
          ) : (
            <>
              <WishlistList list={list} userId={userId} />

              <div className={styles.listActions}>
                <button onClick={() => {
                  setEditListId(list.id);
                  setEditedName(list.name);
                }}>✏️ Modifier</button>

                <button onClick={() => handleDeleteList(list.id)}>🗑️ Supprimer</button>
                <button onClick={() => handleClearList(list.id)}>🧹 Vider la liste</button>
              </div>

              <div className={styles.addCardForm}>
                <input
                  type="text"
                  placeholder="ID Scryfall à ajouter"
                  value={cardInputs[list.id] || ""}
                  onChange={(e) => handleCardInputChange(list.id, e.target.value)}
                />
                <button onClick={() => handleAddCardToList(list.id)}>➕ Ajouter une carte</button>
              </div>

              {cardsByList[list.id]?.length > 0 ? (
                <div className={styles.listContainer}>
                  {cardsByList[list.id].map((card, index) => (
                    <Card
                      key={card.id}
                      card={card}
                      name={true}
                      modal={true}
                      cardList={cardsByList[list.id]}
                      currentIndex={index}
                    />
                  ))}
                </div>
              ) : (
                <p>Aucune carte dans cette liste.</p>
              )}
            </>
          )}
        </div>
      ))}
    </div>
  );
}
